-- ────────────────────────────────────────────────────────────────────────────┐
--                                                                             │
-- Name:    elems/taffybar/taffybar.hs.tt                                      │
-- Summary: Taffybar configuration.                                            │
-- Authors:                                                                    │
--   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)             │
--                                                                             │
-- Project:                                                                    │
--   - Homepage:        https://github.com/alem0lars/configs-xmonad            │
--   - Getting started: see README.md in the project root folder               │
--                                                                             │
-- License: Apache v2.0 (see below)                                            │
--                                                                             │
-- ────────────────────────────────────────────────────────────────────────────┤
--                                                                             │
-- Licensed to the Apache Software Foundation (ASF) under one more contributor │
-- license agreements.  See the NOTICE file distributed with this work for     │
-- additional information regarding copyright ownership. The ASF licenses this │
-- file to you under the Apache License, Version 2.0 (the "License"); you may  │
-- not use this file except in compliance with the License.                    │
-- You may obtain a copy of the License at                                     │
--                                                                             │
--   http://www.apache.org/licenses/LICENSE-2.0                                │
--                                                                             │
-- Unless required by applicable law or agreed to in writing, software         │
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT   │
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.            │
-- See the License for the specific language governing permissions and         │
-- limitations under the License.                                              │
--                                                                             │
-- ────────────────────────────────────────────────────────────────────────────┤
<% define_locals do
  variable :"taffybar.height", as: :bar_height
  variable :"taffybar.net.eth", as: :eth
  variable :"taffybar.net.wifi", as: :wifi
  variable :"taffybar.disks", as: :disks, default: []
  prefixed :"xmonad.", as: nil do
    variable :colorscheme
  end
end %>
-- ────────────────────────────────────────────────────────────────────────────┘


import System.Taffybar

import System.Taffybar.Battery
import System.Taffybar.Systray
import System.Taffybar.TaffyPager
import System.Taffybar.SimpleClock
import System.Taffybar.Weather
import System.Taffybar.MPRIS
import qualified System.Taffybar.NetMonitor as NetMonitor
import qualified System.Taffybar.DiskIOMonitor as DiskIOMonitor
import qualified System.Taffybar.MPRIS2 as MPRIS2

import System.Taffybar.Widgets.PollingBar
import System.Taffybar.Widgets.PollingGraph

import System.Information.Memory
import System.Information.CPU

memCallback = do
  mi <- parseMeminfo
  return [memoryUsedRatio mi]

cpuCallback = do
  (userLoad, systemLoad, totalLoad) <- cpuLoad
  return [totalLoad, systemLoad]

main = do
  let diskConfig name = defaultGraphConfig { graphLabel = Just name
                                           }
      memoryConfig = defaultGraphConfig { graphDataColors = [(1, 0, 0, 1)]
                                        , graphLabel = Just "mem"
                                        }
      cpuConfig = defaultGraphConfig { graphDataColors = [ (0, 1, 0, 1)
                                                         , (1, 0, 1, 0.5)
                                                         ]
                                     , graphLabel = Just "cpu"
                                     }
      batteryConfig = defaultBatteryConfig

  let clock = textClockNew Nothing "<span fgcolor='orange'>%a %b %_d %H:%M</span>" 1
      pager = taffyPagerNew defaultPagerConfig
      mpris = MPRIS2.mpris2New
      mem = pollingGraphNew memoryConfig 5 memCallback
      cpu = pollingGraphNew cpuConfig 5 cpuCallback
      bat = batteryBarNew batteryConfig 30
      <% local!(:disks).each do |disk| %>
      disk<%= disk.capitalize %> = DiskIOMonitor.dioMonitorNew (diskConfig "<%= disk %>") 0.5 "<%= disk %>"
      <% end %>
      tray = systrayNew
      <% if local? :eth %>
      eth = NetMonitor.netMonitorNewWith 5 "<%= local! :eth %>" 2 "eth: ▼ $inMB$MB/s ▲ $outMB$MB/s"
      <% end %>
      <% if local? :wifi %>
      wifi = NetMonitor.netMonitorNewWith 5 "<%= local! :wifi %>" 2 "wifi: ▼ $inMB$MB/s ▲ $outMB$MB/s"
      <% end %>

  defaultTaffybar defaultTaffybarConfig
      { barHeight = <%= local! :bar_height %>
      , startWidgets = [ pager
                       ]
      , endWidgets = [ tray
                     , clock
                     , bat
                     <%= local?(:wifi) ? ", wifi" : "" %>
                     <%= local?(:eth) ? ", eth" : "" %>
                     <% local!(:disks).reverse.each do |disk| %>
                     <%= ", disk#{disk.capitalize}" %>
                     <% end %>
                     , mem
                     , cpu
                     , mpris
                     ]
      }


-- vim: set filetype=eruby.haskell :
