-- encoding: UTF-8
-- ────────────────────────────────────────────────────────────────────────────┐
--                                                                             │
-- Name:    elems/taffybar/taffybar.hs.tt                                      │
-- Summary: Taffybar configuration.                                            │
-- Authors:                                                                    │
--   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)             │
--                                                                             │
-- Project:                                                                    │
--   - Homepage:        https://github.com/alem0lars/configs-xmonad            │
--   - Getting started: see README.md in the project root folder               │
--                                                                             │
-- License: Apache v2.0 (see below)                                            │
--                                                                             │
-- ────────────────────────────────────────────────────────────────────────────┤
--                                                                             │
-- Licensed to the Apache Software Foundation (ASF) under one more contributor │
-- license agreements.  See the NOTICE file distributed with this work for     │
-- additional information regarding copyright ownership. The ASF licenses this │
-- file to you under the Apache License, Version 2.0 (the "License"); you may  │
-- not use this file except in compliance with the License.                    │
-- You may obtain a copy of the License at                                     │
--                                                                             │
--   http://www.apache.org/licenses/LICENSE-2.0                                │
--                                                                             │
-- Unless required by applicable law or agreed to in writing, software         │
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT   │
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.            │
-- See the License for the specific language governing permissions and         │
-- limitations under the License.                                              │
--                                                                             │
-- ────────────────────────────────────────────────────────────────────────────┤
<%
  define_locals do
    variable "taffybar.height", as: :bar_height

    variable "taffybar.clock.delay", as: :clock_delay
    variable "taffybar.pager.widget_separator.symbol",
             as: :pager_widget_separator_symbol
    variable "taffybar.pager.active_window.max_length",
             as: :pager_active_window_max_length

    variable "taffybar.battery.padding",        as: :battery_padding
    variable "taffybar.battery.width",          as: :battery_width
    variable "taffybar.battery.polling_period", as: :battery_polling_period

    variable "taffybar.network", as: :network

    variable "taffybar.disks", as: :disks, default: []

    prefixed "xmonad.", as: nil do
      variable :colorscheme
    end
  end

  def color_for(subject, kind, default: nil)
    if subject.is_a? String
      info = get_var! "taffybar.#{subject}".to_sym
    else
      info = subject
    end
    color_name = info["#{kind}_color".to_sym]
    return default unless color_name # color is optional.
    local!(:colorscheme)[color_name.to_sym]
  end

  def color_for!(subject, kind)
    color = color_for(subject, kind)
    error "Failed to get color for subject=#{subject} kind=#{kind}" unless color
    color
  end

  def span_for(content, subject)
    fg_color = color_for(subject, :fg)
    bg_color = color_for(subject, :bg)

    attrs  = []
    attrs << "fgcolor='#{fg_color}'" if fg_color
    attrs << "bgcolor='#{bg_color}'" if bg_color

    "<span #{attrs.join(" ")}>#{content}</span>"
  end
%>
-- ────────────────────────────────────────────────────────────────────────────┘


-- ┌───────────────────────────────────────────────────────────────────────────┐
-- │                            TABLE OF CONTENTS                              │
-- ├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┤
-- │                                                                           │
-- │ ┌──→ •1• imports                                                          │
-- │ │                                                                         │
-- │ ├──→ •2• widgets                                                          │
-- │ │     │                                                                   │
-- │ │     ├─→ •2.01• tray                                                     │
-- │ │     ├─→ •2.02• clock                                                    │
-- │ │     ├─→ •2.03• pager                                                    │
-- │ │     ├─→ •2.04• battery                                                  │
-- │ │     ├─→ •2.05• network                                                  │
-- │ │     ├─→ •2.06• disk                                                     │
-- │ │     ├─→ •2.07• memory                                                   │
-- │ │     └─→ •2.08• cpu                                                      │
-- │ │                                                                         │
-- │ ├──→ •3• main                                                             │
-- │ │                                                                         │
-- │ └──→ •4• utilities                                                        │
-- │                                                                           │
-- └───────────────────────────────────────────────────────────────────────────┘


-- ───────────────────────────────────────────────────────────── imports •1• ──┐

import qualified Numeric as Numeric

import qualified Data.List as List

import qualified Graphics.UI.Gtk as Gtk

import qualified System.Taffybar as Taffybar

import qualified System.Taffybar.Battery       as Battery
import qualified System.Taffybar.DiskIOMonitor as DiskIOMonitor
import qualified System.Taffybar.NetMonitor    as NetMonitor
import qualified System.Taffybar.SimpleClock   as SimpleClock
import qualified System.Taffybar.Systray       as Systray
import qualified System.Taffybar.Pager         as Pager
import qualified System.Taffybar.TaffyPager    as TaffyPager
import qualified System.Taffybar.Weather       as Weather

import qualified System.Taffybar.Widgets.PollingBar   as PollingBar
import qualified System.Taffybar.Widgets.PollingGraph as PollingGraph

import qualified System.Information.Memory as Memory
import qualified System.Information.CPU    as CPU

-- ────────────────────────────────────────────────────────────────────────────┘


-- ───────────────────────────────────────────────────────────── widgets •2• ──┐

-- ───────────────────────────────────────────────────────────── tray •2.01• ──┤

trayWidget :: IO Gtk.Widget
trayWidget  = Systray.systrayNew

-- ──────────────────────────────────────────────────────────── clock •2.02• ──┤

clockWidget :: IO Gtk.Widget
clockWidget  = SimpleClock.textClockNewWith config format delay
  where
    config = SimpleClock.ClockConfig
           { SimpleClock.clockTimeZone   = Nothing
           , SimpleClock.clockTimeLocale = Nothing
           }
    format = List.intercalate " "
           [ "<%= span_for "%m-%d", "clock.date" %>"
           , "<%= span_for "%H:%M", "clock.time" %>"
           ]
    delay  = <%= local! :clock_delay %>

-- ──────────────────────────────────────────────────────────── pager •2.03• ──┤

pagerWidget :: IO Gtk.Widget
pagerWidget  = TaffyPager.taffyPagerNew TaffyPager.defaultPagerConfig
             { TaffyPager.activeLayout     = activeLayout
             , TaffyPager.activeWorkspace  = activeWorkspace
             , TaffyPager.visibleWorkspace = visibleWorkspace
             , TaffyPager.emptyWorkspace   = emptyWorkspace
             , TaffyPager.hiddenWorkspace  = hiddenWorkspace
             , TaffyPager.urgentWorkspace  = urgentWorkspace
             , TaffyPager.widgetSep        = widgetSeparator
             , TaffyPager.activeWindow     = activeWindow
             }
  where
    activeLayout = Pager.colorize
                    "<%= color_for "pager.active_layout", :fg %>"
                    "<%= color_for "pager.active_layout", :bg %>"
                 . Pager.escape

    activeWorkspace = Pager.colorize
                        "<%= color_for "pager.active_workspace", :fg %>"
                        "<%= color_for "pager.active_workspace", :bg %>"
                    . Pager.escape

    visibleWorkspace = Pager.colorize
                         "<%= color_for "pager.visible_workspace", :fg %>"
                         "<%= color_for "pager.visible_workspace", :bg %>"
                     . Pager.escape

    emptyWorkspace = Pager.colorize
                       "<%= color_for "pager.empty_workspace", :fg %>"
                       "<%= color_for "pager.empty_workspace", :bg %>"
                   . Pager.escape

    hiddenWorkspace = Pager.colorize
                        "<%= color_for "pager.hidden_workspace", :fg %>"
                        "<%= color_for "pager.hidden_workspace", :bg %>"
                    . Pager.escape

    urgentWorkspace = Pager.colorize
                        "<%= color_for "pager.urgent_workspace", :fg %>"
                        "<%= color_for "pager.urgent_workspace", :bg %>"
                    . Pager.escape

    widgetSeparator = Pager.colorize
                        "<%= color_for "pager.widget_separator", :fg %>"
                        "<%= color_for "pager.widget_separator", :bg %>"
                        "<%= local! :pager_widget_separator_symbol %>"

    activeWindow = (Pager.wrap " " " ")
                 . Pager.escape
                 . Pager.shorten <%= local! :pager_active_window_max_length %>

-- ────────────────────────────────────────────────────────── battery •2.04• ──┤

batteryConfig :: PollingBar.BarConfig
batteryConfig  = Battery.defaultBatteryConfig
               { PollingBar.barBorderColor     = batteryBorderColor
               , PollingBar.barBackgroundColor = batteryBgColor
               , PollingBar.barColor           = batteryColor
               , PollingBar.barPadding         = batteryPadding
               , PollingBar.barWidth           = batteryWidth
               }
  where
    batteryColor percentage
      | percentage < 0.10 = hexToRgb "<%= color_for! "battery", :critical %>"
      | percentage < 0.20 = hexToRgb "<%= color_for! "battery", :lower %>"
      | percentage < 0.40 = hexToRgb "<%= color_for! "battery", :low %>"
      | percentage < 0.60 = hexToRgb "<%= color_for! "battery", :medium %>"
      | percentage < 0.80 = hexToRgb "<%= color_for! "battery", :high %>"
      | percentage < 0.98 = hexToRgb "<%= color_for! "battery", :higher %>"
      | otherwise         = hexToRgb "<%= color_for! "battery", :full %>"

    batteryBorderColor =         hexToRgb "<%= color_for! "battery", :border %>"
    batteryBgColor     = const $ hexToRgb "<%= color_for! "battery", :bg %>"

    batteryPadding = <%= local! :battery_padding %>
    batteryWidth   = <%= local! :battery_width %>

    batteryDirection = PollingBar.VERTICAL

batteryWidget :: IO Gtk.Widget
batteryWidget  = Battery.batteryBarNew batteryConfig batteryPollingPeriod
  where
    batteryPollingPeriod = <%= local! :battery_polling_period %>

-- ────────────────────────────────────────────────────────── network •2.05• ──┤

networkWidgets :: [IO Gtk.Widget]
networkWidgets  =
  [
<% local!(:network).reverse.each_with_index do |network, index| %>
  <%= index == 0 ? "  " : "," -%>
  NetMonitor.netMonitorNewWith
    <%= network[:polling_period] %>
    "<%= network[:interface] %>"
    <%= network[:precision] %>
    "<%= span_for(network[:name] + ":" +
                  " \\x2193" +
                  span_for("$inKB$",  {
                    fg_color: network[:in_fg_color],
                    bg_color: network[:in_bg_color]
                  }) +
                  " \\x2191" +
                  span_for("$outKB$", {
                    fg_color: network[:out_fg_color],
                    bg_color: network[:out_bg_color]
                  }),
                  {
                    fg_color: network[:name_fg_color],
                    bg_color: network[:name_bg_color]
                  })
     %>"
<% end %>
  ]

-- ───────────────────────────────────────────────────────────── disk •2.06• ──┤

diskConfig name = PollingGraph.defaultGraphConfig
                { PollingGraph.graphLabel = Just name
                }

diskWidgets :: [IO Gtk.Widget]
diskWidgets  =
  [
<% local!(:disks).reverse.each_with_index do |disk, index| %>
  <%= index == 0 ? " " : "," -%>
  DiskIOMonitor.dioMonitorNew
    (diskConfig "<%= span_for(disk[:name], {
                                fg_color: disk[:name_fg_color],
                                bg_color: disk[:name_bg_color]
                              })
                 %>")
    <%= disk[:polling_period] %>
    "<%= disk[:device] %>"
<% end %>
  ]

-- ─────────────────────────────────────────────────────────── memory •2.07• ──┤

memoryCallback :: IO [Double]
memoryCallback  = do memoryInfo <- Memory.parseMeminfo
                     return [Memory.memoryUsedRatio memoryInfo]

memoryConfig name = PollingGraph.defaultGraphConfig
                  { PollingGraph.graphDataColors = [(1, 0, 0, 1)]
                  , PollingGraph.graphLabel = Just "mem"
                  }

memoryWidget :: IO Gtk.Widget
memoryWidget  = PollingGraph.pollingGraphNew (memoryConfig "mem") 5 memoryCallback

-- ────────────────────────────────────────────────────────────── cpu •2.08• ──┤

cpuCallback :: IO [Double]
cpuCallback  = do (userLoad, systemLoad, totalLoad) <- CPU.cpuLoad
                  return [totalLoad, systemLoad]

cpuConfig name = PollingGraph.defaultGraphConfig
               { PollingGraph.graphDataColors = [ (0, 1, 0, 1)
                                                , (1, 0, 1, 0.5)
                                                ]
               , PollingGraph.graphLabel = Just name
               }

cpuWidget :: IO Gtk.Widget
cpuWidget  = PollingGraph.pollingGraphNew (cpuConfig "cpu") 5 cpuCallback

-- ────────────────────────────────────────────────────────────────────────────┘


-- ──────────────────────────────────────────────────────────────── main •3• ──┐

main = do
  Taffybar.defaultTaffybar Taffybar.defaultTaffybarConfig
      { Taffybar.barHeight    = <%= local! :bar_height %>
      , Taffybar.startWidgets = [ pagerWidget
                                ]
      , Taffybar.endWidgets   = [ trayWidget
                                , clockWidget
                                , batteryWidget
                                ]
                                ++
                                networkWidgets
                                ++
                                diskWidgets
                                ++
                                [ memoryWidget
                                , cpuWidget
                                ]
      }

-- ────────────────────────────────────────────────────────────────────────────┘


-- ─────────────────────────────────────────────────────────── utilities •4• ──┐

hexToRgb     :: String -> (Double, Double, Double)
hexToRgb hex  = ( (parseHex $ red   hex) / 255.0
                , (parseHex $ green hex) / 255.0
                , (parseHex $ blue  hex) / 255.0
                )
  where
    parseHex str = fst $ Numeric.readHex str !! 0

    red   hex = drop 1 . take 3 $ hex
    green hex = drop 3 . take 5 $ hex
    blue  hex = drop 5 . take 7 $ hex

-- ────────────────────────────────────────────────────────────────────────────┘


-- vim: set filetype=eruby.haskell :
